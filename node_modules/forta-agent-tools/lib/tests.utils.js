"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runBlock = exports.TestBlockEvent = exports.TestTransactionEvent = exports.createAddress = exports.generalTestFindingGenerator = void 0;
var web3_utils_1 = require("web3-utils");
var forta_agent_1 = require("forta-agent");
var utils_1 = require("./utils");
;
;
var generalTestFindingGenerator = function () {
    return forta_agent_1.Finding.fromObject({
        name: "Finding Test",
        description: "Finding for test",
        alertId: "TEST",
        severity: forta_agent_1.FindingSeverity.Low,
        type: forta_agent_1.FindingType.Info,
    });
};
exports.generalTestFindingGenerator = generalTestFindingGenerator;
var createAddress = function (suffix) {
    return (0, web3_utils_1.leftPad)(suffix, 40);
};
exports.createAddress = createAddress;
var TestTransactionEvent = /** @class */ (function (_super) {
    __extends(TestTransactionEvent, _super);
    function TestTransactionEvent() {
        var _this = this;
        var transaction = {
            data: "",
            hash: "",
            from: (0, exports.createAddress)("0x0"),
            to: (0, exports.createAddress)("0x1"),
            value: "0",
        };
        var receipt = {
            gasUsed: "1000000",
            logs: [],
            status: true,
        };
        var block = {};
        _this = _super.call(this, forta_agent_1.EventType.BLOCK, forta_agent_1.Network.MAINNET, transaction, receipt, [], {}, block) || this;
        return _this;
    }
    TestTransactionEvent.prototype.setHash = function (hash) {
        this.transaction.hash = hash;
        return this;
    };
    TestTransactionEvent.prototype.setFrom = function (address) {
        this.transaction.from = address;
        return this;
    };
    TestTransactionEvent.prototype.setTo = function (address) {
        this.transaction.to = address;
        return this;
    };
    TestTransactionEvent.prototype.setValue = function (value) {
        this.transaction.value = value;
        return this;
    };
    TestTransactionEvent.prototype.setData = function (data) {
        this.transaction.data = data;
        return this;
    };
    TestTransactionEvent.prototype.setGasUsed = function (value) {
        this.receipt.gasUsed = value;
        return this;
    };
    TestTransactionEvent.prototype.setStatus = function (status) {
        this.receipt.status = status;
        return this;
    };
    TestTransactionEvent.prototype.setTimestamp = function (timestamp) {
        this.block.timestamp = timestamp;
        return this;
    };
    TestTransactionEvent.prototype.setBlock = function (block) {
        this.block.number = block;
        return this;
    };
    TestTransactionEvent.prototype.addEventLog = function (eventSignature, address, data) {
        if (address === void 0) { address = (0, exports.createAddress)("0x0"); }
        if (data === void 0) { data = ""; }
        var topics = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            topics[_i - 3] = arguments[_i];
        }
        this.receipt.logs.push({
            address: address,
            topics: __spreadArray([(0, utils_1.encodeEventSignature)(eventSignature)], topics, true),
            data: data,
        });
        return this;
    };
    TestTransactionEvent.prototype.addAnonymousEventLog = function (address, data) {
        if (address === void 0) { address = (0, exports.createAddress)("0x0"); }
        if (data === void 0) { data = ""; }
        var topics = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            topics[_i - 2] = arguments[_i];
        }
        this.receipt.logs.push({
            address: address,
            topics: topics,
            data: data,
        });
        return this;
    };
    TestTransactionEvent.prototype.addInvolvedAddresses = function () {
        var addresses = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            addresses[_i] = arguments[_i];
        }
        for (var _a = 0, addresses_1 = addresses; _a < addresses_1.length; _a++) {
            var address = addresses_1[_a];
            this.addresses[address.toLowerCase()] = true;
        }
        return this;
    };
    TestTransactionEvent.prototype.addTraces = function () {
        var _a;
        var traceProps = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            traceProps[_i] = arguments[_i];
        }
        var toTrace = function (_a) {
            var to = _a.to, from = _a.from, input = _a.input, output = _a.output;
            return {
                action: { to: to, from: from, input: input },
                result: { output: output },
            };
        };
        (_a = this.traces).push.apply(_a, traceProps.map(toTrace));
        return this;
    };
    return TestTransactionEvent;
}(forta_agent_1.TransactionEvent));
exports.TestTransactionEvent = TestTransactionEvent;
;
var TestBlockEvent = /** @class */ (function (_super) {
    __extends(TestBlockEvent, _super);
    function TestBlockEvent(blockNumber, blockHash) {
        if (blockNumber === void 0) { blockNumber = 0; }
        if (blockHash === void 0) { blockHash = (0, exports.createAddress)("0x0"); }
        var _this = this;
        var block = {
            transactions: [],
            hash: blockHash,
            number: blockNumber,
        };
        _this = _super.call(this, forta_agent_1.EventType.BLOCK, forta_agent_1.Network.MAINNET, blockHash, blockNumber, block) || this;
        return _this;
    }
    TestBlockEvent.prototype.setNumber = function (blockNumber) {
        this.block.number = blockNumber;
        return this;
    };
    TestBlockEvent.prototype.setHash = function (blockHash) {
        this.block.hash = blockHash;
        return this;
    };
    TestBlockEvent.prototype.setTimestamp = function (timestamp) {
        this.block.timestamp = timestamp;
        return this;
    };
    TestBlockEvent.prototype.addTransactions = function () {
        var _a;
        var txns = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            txns[_i] = arguments[_i];
        }
        (_a = this.block.transactions).push.apply(_a, txns.map(function (tx) { return tx.hash; }));
        return this;
    };
    TestBlockEvent.prototype.addTransactionsHashes = function () {
        var _a;
        var hashes = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            hashes[_i] = arguments[_i];
        }
        (_a = this.block.transactions).push.apply(_a, hashes);
        return this;
    };
    return TestBlockEvent;
}(forta_agent_1.BlockEvent));
exports.TestBlockEvent = TestBlockEvent;
;
function runBlock(agent, block) {
    var txns = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        txns[_i - 2] = arguments[_i];
    }
    return __awaiter(this, void 0, void 0, function () {
        var findings, _a, _b, _c, _d, txns_1, tx, _e, _f, _g;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    findings = [];
                    _b = (_a = findings.push).apply;
                    _c = [findings];
                    return [4 /*yield*/, agent.handleBlock(block)];
                case 1:
                    _b.apply(_a, _c.concat([_h.sent()]));
                    _d = 0, txns_1 = txns;
                    _h.label = 2;
                case 2:
                    if (!(_d < txns_1.length)) return [3 /*break*/, 5];
                    tx = txns_1[_d];
                    _f = (_e = findings.push).apply;
                    _g = [findings];
                    return [4 /*yield*/, agent.handleTransaction(tx)];
                case 3:
                    _f.apply(_e, _g.concat([_h.sent()]));
                    _h.label = 4;
                case 4:
                    _d++;
                    return [3 /*break*/, 2];
                case 5: return [2 /*return*/, findings];
            }
        });
    });
}
exports.runBlock = runBlock;
;
