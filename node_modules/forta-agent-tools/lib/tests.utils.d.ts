import { TransactionEvent, Finding, BlockEvent, HandleTransaction, HandleBlock } from "forta-agent";
import { FindingGenerator } from "./utils";
import { AbiItem } from "web3-utils";
export interface Agent {
    handleTransaction: HandleTransaction;
    handleBlock: HandleBlock;
}
export interface TraceProps {
    to?: string;
    from?: string;
    input?: string;
    output?: string;
}
export declare const generalTestFindingGenerator: FindingGenerator;
export declare const createAddress: (suffix: string) => string;
export declare class TestTransactionEvent extends TransactionEvent {
    constructor();
    setHash(hash: string): TestTransactionEvent;
    setFrom(address: string): TestTransactionEvent;
    setTo(address: string): TestTransactionEvent;
    setValue(value: string): TestTransactionEvent;
    setData(data: string): TestTransactionEvent;
    setGasUsed(value: string): TestTransactionEvent;
    setStatus(status: boolean): TestTransactionEvent;
    setTimestamp(timestamp: number): TestTransactionEvent;
    setBlock(block: number): TestTransactionEvent;
    addEventLog(eventSignature: string | AbiItem, address?: string, data?: string, ...topics: string[]): TestTransactionEvent;
    addAnonymousEventLog(address?: string, data?: string, ...topics: string[]): TestTransactionEvent;
    addInvolvedAddresses(...addresses: string[]): TestTransactionEvent;
    addTraces(...traceProps: TraceProps[]): TestTransactionEvent;
}
export declare class TestBlockEvent extends BlockEvent {
    constructor(blockNumber?: number, blockHash?: string);
    setNumber(blockNumber: number): TestBlockEvent;
    setHash(blockHash: string): TestBlockEvent;
    setTimestamp(timestamp: number): TestBlockEvent;
    addTransactions(...txns: TransactionEvent[]): TestBlockEvent;
    addTransactionsHashes(...hashes: string[]): TestBlockEvent;
}
export declare function runBlock(agent: Agent, block: BlockEvent, ...txns: TransactionEvent[]): Promise<Finding[]>;
