"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var os_1 = __importDefault(require("os"));
var fs_1 = __importDefault(require("fs"));
var path_1 = require("path");
var awilix_1 = require("awilix");
var web3_1 = __importDefault(require("web3"));
var shelljs_1 = __importDefault(require("shelljs"));
var prompts_1 = __importDefault(require("prompts"));
var jsonc_1 = require("jsonc");
var axios_1 = __importDefault(require("axios"));
var init_1 = __importDefault(require("./commands/init"));
var run_1 = __importDefault(require("./commands/run"));
var publish_1 = __importDefault(require("./commands/publish"));
var agent_controller_1 = __importDefault(require("./commands/run/server/agent.controller"));
var run_transaction_1 = require("./commands/run/run.transaction");
var run_block_1 = require("./commands/run/run.block");
var run_block_range_1 = require("./commands/run/run.block.range");
var run_file_1 = require("./commands/run/run.file");
var run_live_1 = require("./commands/run/run.live");
var server_1 = __importDefault(require("./commands/run/server"));
var get_credentials_1 = __importDefault(require("./commands/publish/get.credentials"));
var upload_image_1 = __importDefault(require("./commands/publish/upload.image"));
var upload_manifest_1 = __importDefault(require("./commands/publish/upload.manifest"));
var push_to_registry_1 = __importDefault(require("./commands/publish/push.to.registry"));
var utils_1 = require("./utils");
var agent_registry_1 = __importDefault(require("./commands/publish/agent.registry"));
var get_agent_handlers_1 = require("./utils/get.agent.handlers");
var get_keyfile_1 = require("./utils/get.keyfile");
var create_keyfile_1 = require("./utils/create.keyfile");
var get_trace_data_1 = require("./utils/get.trace.data");
var get_python_agent_handlers_1 = require("./utils/get.python.agent.handlers");
var add_to_ipfs_1 = __importDefault(require("./utils/add.to.ipfs"));
var run_handlers_on_block_1 = require("./utils/run.handlers.on.block");
var run_handlers_on_transaction_1 = require("./utils/run.handlers.on.transaction");
var append_to_file_1 = __importDefault(require("./utils/append.to.file"));
function configureContainer(commandName, cliArgs) {
    var container = awilix_1.createContainer({ injectionMode: awilix_1.InjectionMode.CLASSIC });
    var bindings = {
        container: awilix_1.asValue(container),
        isProduction: awilix_1.asValue(process.env.NODE_ENV === 'production'),
        isDebug: awilix_1.asFunction(function (fortaConfig) { return fortaConfig.debug; }),
        shell: awilix_1.asFunction(function (isDebug) {
            shelljs_1.default.config.silent = isDebug ? false : true;
            return shelljs_1.default;
        }).singleton(),
        axios: awilix_1.asValue(axios_1.default),
        prompt: awilix_1.asValue(prompts_1.default),
        setInterval: awilix_1.asValue(setInterval),
        filesystem: awilix_1.asValue(fs_1.default),
        dynamicImport: awilix_1.asValue(function (path) { return Promise.resolve().then(function () { return __importStar(require(path)); }); }),
        fortaKeystore: awilix_1.asValue(path_1.join(os_1.default.homedir(), ".forta")),
        fortaConfigFilename: awilix_1.asFunction(function () {
            return cliArgs.config || "forta.config.json";
        }).singleton(),
        fortaConfig: awilix_1.asFunction(function (fortaConfigFilename, isProduction) {
            var config = {};
            if (commandName === "init" || isProduction)
                return config;
            var filePath = path_1.join(process.cwd(), fortaConfigFilename);
            if (!fs_1.default.existsSync(filePath))
                throw new Error("config file " + fortaConfigFilename + " not found");
            try {
                config = utils_1.getJsonFile(filePath);
            }
            catch (e) {
                throw new Error("unable to parse config file " + fortaConfigFilename + ": " + e.message);
            }
            return config;
        }).singleton(),
        init: awilix_1.asFunction(init_1.default),
        run: awilix_1.asFunction(run_1.default),
        publish: awilix_1.asFunction(publish_1.default),
        runProdServer: awilix_1.asFunction(server_1.default),
        runTransaction: awilix_1.asFunction(run_transaction_1.provideRunTransaction),
        runBlock: awilix_1.asFunction(run_block_1.provideRunBlock),
        runBlockRange: awilix_1.asFunction(run_block_range_1.provideRunBlockRange),
        runFile: awilix_1.asFunction(run_file_1.provideRunFile),
        runLive: awilix_1.asFunction(run_live_1.provideRunLive),
        getCredentials: awilix_1.asFunction(get_credentials_1.default),
        uploadImage: awilix_1.asFunction(upload_image_1.default),
        uploadManifest: awilix_1.asFunction(upload_manifest_1.default),
        pushToRegistry: awilix_1.asFunction(push_to_registry_1.default),
        agentId: awilix_1.asFunction(function (fortaConfig) {
            return fortaConfig.agentId;
        }),
        version: awilix_1.asFunction(function (fortaConfig) {
            return fortaConfig.version;
        }),
        keyfileName: awilix_1.asFunction(function (fortaConfig) {
            return fortaConfig.keyfile;
        }),
        documentation: awilix_1.asFunction(function (fortaConfig, fortaConfigFilename) {
            if (!fortaConfig.documentation) {
                throw new Error("no documentation provided in " + fortaConfigFilename);
            }
            return path_1.join('.', fortaConfig.documentation);
        }),
        agentPath: awilix_1.asFunction(function () {
            var projectDir = process.cwd();
            var agentPath = path_1.join(projectDir, "src", "agent");
            if (fs_1.default.existsSync(path_1.join(projectDir, "src", "agent.ts"))) {
                var tsConfigPath = path_1.join(projectDir, "tsconfig.json");
                var compilerOptions = jsonc_1.jsonc.parse(fs_1.default.readFileSync(tsConfigPath, 'utf8')).compilerOptions;
                agentPath = path_1.join(projectDir, compilerOptions.outDir, "agent");
            }
            else if (fs_1.default.existsSync(path_1.join(projectDir, "src", "agent.py"))) {
                agentPath = path_1.join(projectDir, "src", "agent.py");
            }
            return agentPath;
        }),
        getAgentHandlers: awilix_1.asFunction(get_agent_handlers_1.provideGetAgentHandlers).singleton(),
        getPythonAgentHandlers: awilix_1.asFunction(get_python_agent_handlers_1.provideGetPythonAgentHandlers),
        runHandlersOnBlock: awilix_1.asFunction(run_handlers_on_block_1.provideRunHandlersOnBlock),
        runHandlersOnTransaction: awilix_1.asFunction(run_handlers_on_transaction_1.provideRunHandlersOnTransaction),
        getJsonFile: awilix_1.asValue(utils_1.getJsonFile),
        createBlockEvent: awilix_1.asValue(utils_1.createBlockEvent),
        createTransactionEvent: awilix_1.asValue(utils_1.createTransactionEvent),
        getKeyfile: awilix_1.asFunction(get_keyfile_1.provideGetKeyfile),
        createKeyfile: awilix_1.asFunction(create_keyfile_1.provideCreateKeyfile),
        addToIpfs: awilix_1.asFunction(add_to_ipfs_1.default),
        appendToFile: awilix_1.asFunction(append_to_file_1.default),
        getTraceData: awilix_1.asFunction(get_trace_data_1.provideGetTraceData),
        traceRpcUrl: awilix_1.asFunction(function (fortaConfig) {
            return fortaConfig.traceRpcUrl;
        }).singleton(),
        traceBlockMethod: awilix_1.asFunction(function (fortaConfig) {
            return fortaConfig.traceBlockMethod || "trace_block";
        }).singleton(),
        traceTransactionMethod: awilix_1.asFunction(function (fortaConfig) {
            return fortaConfig.traceTransactionMethod || "trace_transaction";
        }).singleton(),
        agentController: awilix_1.asClass(agent_controller_1.default),
        port: awilix_1.asValue(process.env.AGENT_GRPC_PORT || "50051"),
        imageRepositoryUrl: awilix_1.asFunction(function (fortaConfig) {
            return fortaConfig.imageRepositoryUrl || "disco.forta.network";
        }),
        imageRepositoryUsername: awilix_1.asFunction(function (fortaConfig) {
            return fortaConfig.imageRepositoryUsername || "discouser";
        }),
        imageRepositoryPassword: awilix_1.asFunction(function (fortaConfig) {
            return fortaConfig.imageRepositoryPassword || "discopass";
        }),
        agentRegistry: awilix_1.asClass(agent_registry_1.default),
        agentRegistryContractAddress: awilix_1.asFunction(function (fortaConfig) {
            return fortaConfig.agentRegistryContractAddress || "0xFE1927bF5bc338e4884A0d406e33921e8058d75d";
        }),
        agentRegistryJsonRpcUrl: awilix_1.asFunction(function (fortaConfig) {
            return fortaConfig.agentRegistryJsonRpcUrl || "https://goerli-light.eth.linkpool.io/";
        }),
        jsonRpcUrl: awilix_1.asFunction(function (fortaConfig, fortaConfigFilename) {
            if (!fortaConfig.jsonRpcUrl) {
                throw new Error("no jsonRpcUrl provided in " + fortaConfigFilename);
            }
            else if (!fortaConfig.jsonRpcUrl.startsWith("http")) {
                throw new Error("jsonRpcUrl must begin with http or https");
            }
            return fortaConfig.jsonRpcUrl;
        }),
        web3: awilix_1.asFunction(function (jsonRpcUrl) { return new web3_1.default(jsonRpcUrl); }).singleton(),
        web3AgentRegistry: awilix_1.asFunction(function (agentRegistryJsonRpcUrl) { return new web3_1.default(agentRegistryJsonRpcUrl); }).singleton(),
        ipfsGatewayUrl: awilix_1.asFunction(function (fortaConfig, fortaConfigFilename) {
            if (!fortaConfig.ipfsGatewayUrl) {
                throw new Error("no ipfsGatewayUrl provided in " + fortaConfigFilename);
            }
            return fortaConfig.ipfsGatewayUrl;
        }),
        ipfsGatewayAuth: awilix_1.asFunction(function (ipfsGatewayUrl, fortaConfig, fortaConfigFilename) {
            if (ipfsGatewayUrl.includes('ipfs.infura.io') && !fortaConfig.ipfsGatewayAuth) {
                throw new Error("no ipfsGatewayAuth provided in " + fortaConfigFilename);
            }
            return fortaConfig.ipfsGatewayAuth;
        }),
        ipfsHttpClient: awilix_1.asFunction(function (ipfsGatewayUrl, ipfsGatewayAuth) {
            var options = { baseURL: ipfsGatewayUrl };
            if (ipfsGatewayAuth) {
                options['headers'] = {
                    authorization: ipfsGatewayAuth
                };
            }
            return axios_1.default.create(options);
        }).singleton()
    };
    container.register(bindings);
    return container;
}
exports.default = configureContainer;
;
